package Controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Main {

	private static final String DECK[] = { "Ar", "At", "Ai", "Ap", "2r", "2t", "2i", "2p", "3r", "3t", "3i", "3p", "4r",
			"4t", "4i", "4p", "5r", "5t", "5i", "5p", "6r", "6t", "6i", "6p", "7r", "7t", "7i", "7p", "8r", "8t", "8i",
			"8p", "9r", "9t", "9i", "9p", "10r", "10t", "10i", "10p", "Vr", "Vt", "Vi", "Vp", "Dr", "Dt", "Di", "Dp",
			"Kr", "Kt", "Ki", "Kp" };

	private static List<Integer> cards;

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		cards = new ArrayList<Integer>();
		Random random = new Random();
		// random.setSeed(0);
		while (cards.size() != 6) {

			int toAdd = random.nextInt(52);
			if (!cards.contains(toAdd)) {
				cards.add(toAdd);
			}
		}

		arrangeCards();

	}

	private static List<Integer> arrange;

	private static void arrangeCards() {

		arrange = new ArrayList<Integer>();

		int romb = 0, trefla = 0, inima = 0, pica = 0;

		for (int i : cards) {
			if (i % 4 == 0) {
				romb++;
			}
			if (i % 4 == 1) {
				trefla++;
			}
			if (i % 4 == 2) {
				inima++;
			}
			if (i % 4 == 3) {
				pica++;
			}
			System.out.println(DECK[i] + "   " + i);
		}
		int aux = -1;
		String culoare = "";
		if (aux < romb) {
			aux = romb;
			culoare = "r";
		}
		if (aux < trefla) {
			aux = trefla;
			culoare = "t";
		}
		if (aux < inima) {
			aux = inima;
			culoare = "i";
		}
		if (aux < pica) {
			aux = pica;
			culoare = "p";
		}

		int lastcard = -1;
		aux = 0;
		for (int i = 0; i < 6; i++) {
			if (DECK[cards.get(i)].substring(DECK[cards.get(i)].length() - 1).equals(culoare)) {
				if (aux == 0) {
					arrange.add(cards.get(i));
					aux = 1;
				} else {
					lastcard = cards.get(i);
				}
			}
		}
		System.out.println();

		int pornire = arrange.get(0) / 4 + 1;
		int oprire = lastcard / 4 + 1;

		System.out.println("Cartea de la care se porneste: " + DECK[arrange.get(0)]);

		int crescand = 0, scazand = 0, directie = 0;

		if (pornire < oprire) {
			crescand = oprire - pornire;
			scazand = pornire + 13 - oprire;
			if (crescand < scazand) {
				directie = 1;
			} else {
				directie = -1;
			}
		} else {
			crescand = 13 - pornire + oprire;
			scazand = pornire - oprire;
			if (crescand < scazand) {
				directie = 1;
			} else {
				directie = -1;
			}
		}

		ArrayList<Integer> patruCarti = new ArrayList<Integer>();
		if (directie == 1) {
			System.out.println("Crescand cu: " + crescand);
			int max = -1;
			for (int i : cards) {
				if (i != lastcard && i != arrange.get(0)) {
					patruCarti.add(i);
					if(max<i) {
						max = i;
					}
				}
			}
			arrange.add(max);
			patruCarti.remove(patruCarti.indexOf(max));
			
			if(crescand == 1) {

			}else if( crescand ==2 ) {

			}else if( crescand ==3 ) {
				
			}else if( crescand ==4 ) {
				
			}else if( crescand ==5 ) {
				
			}else if( crescand ==6 ) {
				
			}
			
		} else if (directie == -1) {
			System.out.println("Scazand cu: " + scazand);
			int max = 99;
			for (int i : cards) {
				if (i != lastcard && i != arrange.get(0)) {
					patruCarti.add(i);
					if(max>i) {
						max = i;
					}
					System.out.print(DECK[i] + " ");
				}
			}
			arrange.add(max);
			patruCarti.remove(patruCarti.indexOf(max));
			
			if(scazand == 1) {
				
			}else if( scazand ==2 ) {
				
			}else if( scazand ==3 ) {
								
			}else if( scazand ==4 ) {
							
			}else if( scazand ==5 ) {
				
			}else if( scazand ==6 ) {
				
			}
		}
		System.out.println("\nCartea care trebuie gasita: " + DECK[lastcard]);
		for(int i: arrange) {
		}

	}
	
	private static int getMax(List<Integer> a) {
		int max = -1;
		for(int i : a) {
			if(max < i) {
				max = i;
			}
		}
		return max;
	}
	
	private static int getMid(List<Integer> a) {

		int max = -1;
		for(int i : a) {
			if(max < i) {
				max = i;
			}
		}
		
		int min = 99;
		for(int i : a) {
			if(min > i) {
				min = i;
			}
		}

		a.remove(a.indexOf(max));
		a.remove(a.indexOf(min));
		
		return a.get(0);
		
	}
	
	private static int getLow(List<Integer> a) {
		int min = 99;
		for(int i : a) {
			if(min > i) {
				min = i;
			}
		}
		return min;
	}

}
